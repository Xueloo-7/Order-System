#include <iostream>
#include <iomanip>
#include <string>
#include <map>
#include <conio.h>
using namespace std;

#pragma region Color
const string YELLOW = "\033[33m";
const string RED = "\033[31m";
const string BLUE = "\033[34m";
const string GREEN = "\033[32m";
const string ORANGE = "\033[38;5;214m";
const string PINK = "\033[38;5;213m";
const string RESET = "\033[0m";
#pragma endregion

struct Item {
	string name;
	double price;
};

struct OrderDetail {
	map<int, int> orderItems;
	double subtotal = 0, discount = 0, totalPayable = 0;
	int totalItemCount = 0;
};

struct CustomerReceipt {
	string name = "None";
	int invoiceNo = 0;
	tm paymentTime = {};
	bool isMember = false;
	OrderDetail orderDetail;
	string paymentMethod = "None";
};

struct LoginData {
	string username, email, password;
	bool isMember = false;
	LoginData() : username("None"), email("None"), password("None"), isMember(false) {}
	LoginData(string username, string email, string password, bool isMember)
	{
		this->username = username;
		this->email = email;
		this->password = password;
		this->isMember = isMember;
	}
};

map<string, bool> bookedTime;
int bookedID[3];
const string bookingTime[3] = { "2:00pm  - Room 404 - Doctor Qi Sheng",
								"4:00pm  - Room 67  - Doctor Jikkennugget",
								"6:00pm  - Room 69  - Doctor Jun Yang" };
const Item items[5] = { { "Panadol", 5.50 }, { "Aspirin", 8.70 }, { "Claritin", 20.00 }, { "Zyrtec", 23.20 }, { "Imodium", 17.30 } };

CustomerReceipt cr[100];
CustomerReceipt currentCustomer;
LoginData loginData[100];
int cr_count, loginData_count;

char confirm;
double review;

int main();
void customerMenu();
void staffMenu();
void customer_order(bool clearOrder, bool orderConfirm);
void customer_booking();

void displayError(string hint) {
	cout << '\n' << RED << "Error: " << hint << RESET << '\n';
}
void clearCin() {
	cin.clear();
	cin.ignore(numeric_limits<streamsize>::max(), '\n');
}
int choice(int min, int max, string hint = "Choice") {
	double choice; string error;
	do {
		error.clear();
		cout << endl << RED << hint << " -> " << RESET;
		cin >> choice;
		// 判断
		if (cin.fail()) error = "Input is not number";
		else if (choice != (int)choice) error = "Number is not an integer";
		else if (choice < min || choice > max) error = "Number out of range(" + to_string(min) + '~' + to_string(max) + ')';
		// 提示错误
		if (!error.empty()) displayError(error);
		clearCin();
	} while (!error.empty());
	return (int)choice;
}
string getString(int maxLength, bool supportDigit, bool onlyEnglish, bool visible, string hint = "Input") {
    string input, error;
    do {
        error.clear(); input.clear();
		cout << endl << BLUE << hint << " -> " << RESET;
        // 处理可见性
        if (visible) {
            getline(cin, input);
        }
        else {
            char ch;
            while ((ch = _getch()) != '\r') {
                // 退格处理
                if (ch == '\b') {
                    if (!input.empty()) {
                        cout << "\b \b"; // 回退光标并清空字符
                        input.pop_back();
                    }
                }
                else if (ch != '\t' && ch != '\n' && ch != ' ') { // 忽略 '\t' 和 '\n' 和 空格
                    input += ch; // 添加字符到输入
                    cout << '*'; // 显示星号
                }
            }
            cout << endl; // 输入完成后换行
        }
        // 判断输入的有效性
        if (input.length() > maxLength) error = "Max length of input is " + to_string(maxLength);
		else if(input.length() == 0) error = "Input is null";
        else {
            if (onlyEnglish) for (char c : input) if(!isalnum(c) && c != ' ' && c != '@' && c != '.') error = "Input only supports English characters";
            if (!supportDigit) for (char c : input) if(isdigit(c)) error = "Input does not support numbers";
        }
        // 提示错误信息
		if (!error.empty()) displayError(error);
    } while (!error.empty());
    return input; // 返回有效输入
}
char getChar(string hint = "Select")
{
	string input;
	cout << endl << BLUE << hint << " -> " << RESET;
	cin >> input;
	clearCin();
	if (input.length() == 1) return toupper(input[0]);
	else return ' ';
}
void waitfor(char input) {
	while (_getch() != input) {}
}
tm currentTime()
{
	time_t currentTime = time(nullptr);
	tm localTime;
	localtime_s(&localTime, &currentTime);
	return localTime;
}

void logo() {
	cout << GREEN << "========================================" << endl;
	cout << YELLOW << "@@         " << BLUE << "&&&&&&&    " << YELLOW << "@@         " << BLUE << "&&&&&&&" << endl;
	cout << YELLOW << "@@         " << BLUE << "&          " << YELLOW << "@@         " << BLUE << "&" << endl;
	cout << YELLOW << "@@         " << BLUE << "&          " << YELLOW << "@@         " << BLUE << "&" << endl;
	cout << YELLOW << "@@         " << BLUE << "&          " << YELLOW << "@@         " << BLUE << "&" << endl;
	cout << YELLOW << "@@@@@@@    " << BLUE << "&&&&&&&    " << YELLOW << "@@@@@@@    " << BLUE << "&&&&&&&" << endl;
	cout << GREEN << "========================================" << endl;
	cout << RESET;
}
void signUp() {
	system("cls"); logo();
	string username, email, password, confirm_password;
	bool isMember;
	username = getString(20, false, true, true, "Enter username");
	email = getString(30, true, true, true, "Enter email");
	do {
		password = getString(15, true, true, false, "Enter password");
		confirm_password = getString(15, true, true, false, "Confirm password");
		if (confirm_password != password) displayError("Password is not match");
	} while (confirm_password != password);
	do {
		confirm = getChar("Become a membership? (Y/N)");
		isMember = confirm == 'Y';
		if(confirm != 'Y' && confirm != 'N') displayError("Invalid input");
	} while (confirm != 'Y' && confirm != 'N');
	cout << "\nPreview\n";
	cout << "username: " << username << endl;
	cout << "email: " << email << endl;
	cout << "password: " << password << endl;
	cout << "membership" << (isMember ? "Yes" : "No") << endl;
	do {
		confirm = getChar("Confirm SignUp? (Y/N)");
		if (confirm == 'Y') {
			for (int i = 0; i < 100; i++) {
				if (email == loginData[i].email) {
					displayError("Error: This email is already exist...");
					waitfor('\r'); main(); return;
				}
			}
			loginData[loginData_count] = LoginData(username, email, password, isMember);
			loginData_count++;
			cout << YELLOW << "\nSignUp successfully, you can login now..." << RESET;
			waitfor('\r'); main(); return;
		}
		else if (confirm == 'N') {
			main(); return;
		}
		else cout << RED << "\nError: Invalid input" << RESET << endl;
	} while (confirm != 'Y' && confirm != 'N');
	
}
string signIn() {
	system("cls"); logo();
	string email, password;
	email = getString(30, true, true, true, "Enter email");
	password = getString(15, true, true, false, "Enter password");
	for (int i = 0; i < 100; i++) {
		if (loginData[i].email == email) {
			if (loginData[i].password == password) {
				currentCustomer.isMember = loginData[i].isMember;
				currentCustomer.name = loginData[i].username;
				cout << YELLOW << "\nLogin Successfully, Press enter to continue..." << RESET;
				waitfor('\r');
				if (email == "staff@gmail.com") return "staff";
				else return "customer";
			}
			else {
				displayError("Wrong password");
				break;
			}
		}
		else if (i == 99) displayError("This email does not exist");
	}
	cout << RED << "\nLogin Failed, Press enter to quit..." << RESET;
	waitfor('\r'); return "";
}

void showInvoice(bool record) {
	double subtotal = 0, itemTotal = 0, discount = 0, totalPayable = 0;
	int totalItemCount = 0;
	// 计算并显示订单内容
	for (const auto& orderItem : currentCustomer.orderDetail.orderItems) {
		subtotal += itemTotal = items[orderItem.first].price * orderItem.second; // 单价 * 数量
		totalItemCount += orderItem.second;
		cout << YELLOW << setw(8) << left << items[orderItem.first].name << " ";
		cout << YELLOW << setw(3) << orderItem.second << " x RM" << fixed << showpoint << setprecision(2) << setw(24) << items[orderItem.first].price;
		cout << YELLOW << "RM " << setw(7) << right << itemTotal << endl;
	}
	// 计算和显示发票细节
	if (currentCustomer.isMember) discount = subtotal * 0.10;
	double serviceCharge = subtotal * 0.05;
	double tax = subtotal * 0.06;
	totalPayable = subtotal - discount + serviceCharge + tax;

	if (record) {
		currentCustomer.invoiceNo++; // 发票编号递增
		currentCustomer.orderDetail.subtotal = subtotal; // 保存小计
		currentCustomer.orderDetail.discount = discount;
		currentCustomer.orderDetail.totalItemCount = totalItemCount; // 保存总物品数量
		currentCustomer.orderDetail.totalPayable = totalPayable; // 保存应付总额g
	}

	cout << RESET << setw(51) << right << "------------" << endl;
	cout << YELLOW << setw(41) << left << "Invoice No." + to_string(currentCustomer.invoiceNo) << endl;
	cout << YELLOW << setw(41) << left << "Subtotal" << "RM " << setw(7) << right << subtotal << endl;
	cout << YELLOW << setw(39) << left << "Discount" << "- RM " << setw(7) << right << discount << endl;
	cout << YELLOW << setw(41) << left << "Service Charge(5%)" << "RM " << setw(7) << right << serviceCharge << endl;
	cout << YELLOW << setw(41) << left << "Tax(6%)" << "RM " << setw(7) << right << tax << endl;
	cout << RESET << setw(51) << right << "------------" << endl;
	cout << YELLOW << setw(41) << left << "Total payable:" << "RM " << setw(7) << right << totalPayable << endl << RESET;
	cout << YELLOW << "Total items: " << totalItemCount << endl;
}
void printReceipt(string paymentMethod) {
	system("cls"); logo();
	cout << ORANGE << "\n===================================================" << endl;
	cout << YELLOW << "                      Receipt                      " << endl;
	cout << ORANGE << "===================================================" << endl;

	showInvoice(false); // 显示发票

	cout << YELLOW << setw(41) << left << "Payment method:" << paymentMethod << endl;
	cout << YELLOW << setw(41) << left << "Payment amount:" << currentCustomer.orderDetail.totalPayable << endl << RESET;
	
	currentCustomer.paymentMethod = paymentMethod;
	currentCustomer.paymentTime = currentTime();
	cr[cr_count] = currentCustomer;
	cr_count++;
	currentCustomer.orderDetail.orderItems.clear(); // 清空订单

	review = (double)((review + choice(1, 5, "Give us a review! (1~5)")) / cr_count);
	do {
		confirm = getChar("Quit(Y)");
	} while (confirm != 'Y');
	customerMenu(); return;
}
void printInvoice() {
	system("cls"); logo();
	cout << ORANGE << "\n===================================================" << endl;
	cout << YELLOW << "                      Invoice                      " << endl;
	cout << ORANGE << "===================================================" << endl;

	showInvoice(true); // 显示发票

	do {
		confirm = getChar(BLUE + "Confirm Order? (Y/N)");
		if (confirm == 'N') {
			customer_order(true, true); // 返回订单
			return;
		}
		else if (confirm != 'Y') displayError("Invalid input");
	} while (confirm != 'Y' && confirm != 'N');

	do {
		confirm = getChar(BLUE + "Select your payment method (E-wallet(W) / DebitCard(D) / Cash(C))");
		if (confirm != 'W' && confirm != 'D' && confirm != 'C') displayError("Invalid input");
		else {
			switch (confirm) {
			case 'W': printReceipt("E-wallet"); return;
			case 'D': printReceipt("Debit Card"); return;
			case 'C': printReceipt("Cash"); return;
			}
		}
	} while (confirm != 'W' && confirm != 'D' && confirm != 'C');
}
void customer_order(bool clearOrder, bool orderConfirm) {
	system("cls"); logo();
	cout << ORANGE << "\nOrder Menu\n" << GREEN;
	cout << left << setw(20) << "Item" << right << setw(17) << "Unit Price" << endl;
	cout << string(37, '-') << endl;
	for (int i = 0; i < 5; i++) {
		cout << left << setw(20) << to_string(i + 1) + "." + items[i].name
			<< right << setw(9) << "RM" << setw(8) << fixed << setprecision(2) << items[i].price
			<< endl;
	}

	if(clearOrder) currentCustomer.orderDetail.orderItems.clear();
	if (orderConfirm) {
		do {
			confirm = getChar("Order? (Y/N)");
			if (confirm == 'N') {
				customerMenu(); return;
			}
			else if (confirm != 'Y') displayError("Invalid input");
		} while (confirm != 'Y' && confirm != 'N');
	}
	
	int select = choice(1, 5, "Select item");
	int quantity = choice(1, 100, "Item quantity");
	currentCustomer.orderDetail.orderItems[select - 1] += quantity;
	
	do {
		confirm = getChar("Anymore Order? (Y/N)");
		if (confirm == 'Y') customer_order(false, false);
		else if (confirm == 'N') printInvoice();
		else displayError("Invalid input");
	} while (confirm != 'Y' && confirm != 'N');
}

void takeNumber() {
	system("cls"); logo();
	cout << ORANGE << "\nTake Attend Number Menu\n" << GREEN;
	int select = 0;
	// 判断是否满了
	bool isFull = true, isBooked = false;
	for (int i = 0; i < 3; i++) {
		if (bookedTime[bookingTime[i]] == false)
			isFull = false;
	}
	if(isFull)
		cout << RED << "\nTime slot full today" << GREEN << endl;
	else {
		// 显示
		for (int i = 0; i < 3; i++) {
			if (bookedTime[bookingTime[i]] == true)
				cout << i + 1 << "." << bookingTime[i] << RED << " [Not Available] " << GREEN << endl;
			else
				cout << i + 1 << "." << bookingTime[i] << endl;
		}
		do {
			confirm = getChar("Booking? (Y/N)");
			if (confirm == 'N') {
				customer_booking(); return;
			}
			else if (confirm != 'Y') cout << RED << "\nError: Invalid input" << RESET << endl;
		} while (confirm != 'Y' && confirm != 'N');
		// 选择
		select = choice(1, 3);
		isBooked = bookedTime[bookingTime[select - 1]];

		if (isBooked) {
			cout << RED << "\nTime slot unavailable." << endl;
		}
		else {
			srand(time(0));
			int bookingID = rand() % (50000 - 10000 + 1) + 10000;
			cout << "\nYour booking id is : " << bookingID << ", Please remember!" << endl;
			do {
				confirm = getChar("Confirm Booking? (Y/N)");
				if (confirm == 'Y' || confirm == 'N') {
					if (confirm == 'Y') {
						bookedTime[bookingTime[select - 1]] = true;
						bookedID[select - 1] = bookingID;
					}
					customer_booking(); return;
				}
				else {
					cout << RED << "\nError: Invalid input" << RESET << endl;
				}
			} while (confirm != 'Y' && confirm != 'N');
		}
	}

	do {
		confirm = getChar("Quit(Y)");
	} while (confirm != 'Y');
	customer_booking(); return;
}
void attend() {
	system("cls"); logo();
	cout << ORANGE << "\nAttend Appointment Menu\n" << GREEN;
	int enterNumber = choice(0, 99999, "Enter your booking number");
	bool found = false;
	for (int i = 0; i < 3; i++) {
		if (enterNumber == bookedID[i]) {
			found = true;
			cout << YELLOW << "\n(" << bookedID[i] << ")" << bookingTime[i] << "." << RESET << endl;
		}
	}
	if(!found) cout << RED << "\nThis id is not exist. Enter to quit." << RESET << endl;
	
	do {
		confirm = getChar("Quit(Y)");
		if (confirm == 'Y') {
			customer_booking(); return;
		}
	} while (confirm != 'Y');
}
void customer_booking() {
	system("cls"); logo();
	cout << ORANGE << "\nHealth Check Menu\n" << GREEN;
	cout << "1.Take booking number\n2.Attend apointment\n3.Back to menu" << RESET << endl;
	switch (choice(1, 3)) {
	case 1: takeNumber(); return;
	case 2: attend(); return;
	case 3: customerMenu(); return;
	}
}

void staff_report() {
	system("cls"); logo();
	cout << ORANGE << "\nReport Menu\n" << GREEN;

	double totalEarning = 0;
	for (const CustomerReceipt c : cr) totalEarning += c.orderDetail.subtotal;
	cout << "Total earning: " << totalEarning << endl;

	do {
		confirm = getChar("Quit(Y)");
	} while (confirm != 'Y');
	staffMenu(); return;
}
void staff_customerReceipt() {
	system("cls"); logo();
	cout << ORANGE << "\nCustomer Receipt Menu\n" << GREEN;
	cout << "=============================================" << endl;
	cout << "Customer Receipt: " << endl;
	if (cr_count == 0)
		cout << "None customer" << endl;
	else
	{
		for (int i = 0; i < cr_count; i++)
		{
			cout << "\nInvoice No: " << i + 1 << setw(25) << right
				<< cr[i].paymentTime.tm_mday << '/'
				<< cr[i].paymentTime.tm_mon + 1 << '/'
				<< cr[i].paymentTime.tm_year + 1900
				<< endl;
			cout << "Customer Name" << ": " << setw(22) << left
				<< cr[i].name << setw(2) << right << fixed << setprecision(2)
				<< cr[i].paymentTime.tm_hour << ':' << setw(2)
				<< cr[i].paymentTime.tm_min << ':' << setw(2)
				<< cr[i].paymentTime.tm_sec << endl;
			if (cr[i].isMember) cout << "[Membership]" << endl;
			else cout << "[Non-Membership]" << endl;
	
			for (const auto& orderItem : cr[i].orderDetail.orderItems)
			{
				cout << setw(8) << left << items[orderItem.first].name << " x " << setw(3) << right << orderItem.second
					<< fixed << showpoint << setprecision(2) << setw(23) << right << "RM" << setw(8)
					<< right << orderItem.second * items[orderItem.first].price << endl;
			}
			cout << setw(45) << right << "-------------" << endl;
			cout << setw(35) << left << "Discount: " << setw(4) << "-RM" << setw(6) << right << cr[i].orderDetail.discount << endl;
			cout << setw(45) << right << "-------------" << endl;
			cout << setw(35) << left << "Total Price: " << setw(3) << "RM" << setw(7) << right << cr[i].orderDetail.subtotal - cr[i].orderDetail.discount << endl;
			cout << "Payment method : " << cr[i].paymentMethod << endl;
			cout << "=============================================" << endl;
		}
		cout << endl;
	}

	do {
		confirm = getChar("Quit(Y)");
	} while (confirm != 'Y');
	staffMenu(); return;
}

void customerMenu() {
	system("cls"); logo();
	cout << "Review: ";
	if (review >= 4) cout << GREEN;
	else if (review >= 2.5) cout << BLUE;
	else cout << RED;
	if (review == 0) cout << RESET << "None review" << endl;
	else cout << review << endl;
	
	cout << ORANGE << "\nCustomer Menu\n" << GREEN;
	cout << "1.Order\n2.Health Check\n3.Log Out" << RESET << endl;
	switch (choice(1, 3)) {
	case 1: customer_order(true, true); return;
	case 2: customer_booking(); return;
	case 3: 
		do {
			confirm = getChar("Confirm Log Out? (Y/N)");
			if (confirm == 'Y') main();
			else if (confirm == 'N') customerMenu();
			else displayError("Invalid input");
		} while (confirm != 'Y' && confirm != 'N'); 
		return;
	}
}
void staffMenu() {
	system("cls"); logo();
	cout << BLUE << "\nStaff Menu\n" << GREEN;
	cout << "1.Report\n2.Customer Receipt\n3.Log Out" << RESET << endl;
	switch (choice(1, 3)) {
	case 1: staff_report(); return;
	case 2: staff_customerReceipt(); return;
	case 3: 
		do {
			confirm = getChar("Confirm Log Out? (Y/N)");
			if (confirm == 'Y') main();
			else if (confirm == 'N') staffMenu();
			else displayError("Invalid input");
		} while (confirm != 'Y' && confirm != 'N');
		return;
	}
}

int main() {
	loginData[0] = LoginData("Staff", "staff@gmail.com", "123", false);
	loginData[1] = LoginData("Loh Qi Sheng", "loh@gmail.com", "123", false);
	loginData[2] = LoginData("Chan Gan Siang", "chan@gmail.com", "123", false);
	loginData[3] = LoginData("Leong Jun Yang", "leong@gmail.com", "123", true);
	loginData[4] = LoginData("Chang Hong Zhao", "chang@gmail.com", "123", true);
	loginData_count += 5;
	bookedTime[bookingTime[0]] = false;
	bookedTime[bookingTime[1]] = false;
	bookedTime[bookingTime[2]] = false;
	system("cls"); logo();
	cout << RED << "\n        Sign Up(1) " << RESET << " / " << BLUE << "Sign In(2)" << endl;
	int c = choice(1,2);
	if (c == 1) { // Sign Up
		//staffMenu(); return 0;

		signUp(); 
	}
	else { // Sign In
		//customerMenu(); return 0;

		string userType = signIn();
		if (userType == "customer") customerMenu();
		else if (userType == "staff") staffMenu();
		else main();
	}

	return 0;
}
